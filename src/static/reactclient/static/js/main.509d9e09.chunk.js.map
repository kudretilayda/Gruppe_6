{"version":3,"sources":["components/dialogs/ProfileDropDown.js","components/layout/Header.js","api/BusinessObject.js","api/CustomerBO.js","api/TransactionBO.js","api/AccountBO.js","api/BankAPI.js","components/dialogs/ContextErrorMessage.js","components/dialogs/LoadingProgress.js","components/dialogs/CustomerForm.js","components/dialogs/CustomerDeleteDialog.js","components/dialogs/MoneyTransferDialog.js","components/AccountListEntry.js","components/AccountList.js","components/CustomerListEntry.js","components/CustomerList.js","components/TransactionList.js","components/pages/About.js","components/AccountDetail.js","components/AllAccountList.js","Theme.js","components/pages/SignIn.js","App.js","index.js"],"names":["ProfileDropDown","props","createRef","handleAvatarButtonClick","setState","open","state","handleClose","handleSignOutButtonClicked","firebase","auth","signOut","this","classes","user","IconButton","className","avatarButton","ref","onClick","Avatar","src","photoURL","Popover","anchorEl","current","onClose","anchorOrigin","vertical","horizontal","transformOrigin","ClickAwayListener","onClickAway","Paper","profileBox","Typography","align","Divider","divider","variant","displayName","email","Grid","container","justify","item","Button","color","Component","withStyles","theme","float","margin","spacing","padding","background","palette","default","Header","handleTabChange","e","newIndex","tabindex","component","Tabs","indicatorColor","textColor","centered","value","onChange","Tab","label","RouterLink","to","BusinessObject","id","result","prop","CustomerBO","first","last","first_name","last_name","name","customers","Array","isArray","forEach","c","Object","setPrototypeOf","prototype","push","TransactionBO","sourceID","targetID","amount","source_account","target_account","type","transactions","t","TYPE_CREDIT","TYPE_DEBIT","AccountBO","o","owner","accounts","a","BankAPI","Intl","NumberFormat","style","currency","customerName","url","init","fetch","then","res","ok","Error","status","statusText","json","responseJSON","customerBOs","fromJSON","Promise","resolve","customerID","responseCustomerBO","customerBO","method","headers","body","JSON","stringify","getID","accountBOs","accountID","accountBO","transactionBOs","transaction","tansactionBO","ContextErrorMessage","error","contextErrorMsg","onReload","Alert","severity","root","AlertTitle","margins","message","startIcon","marginTop","LoadingProgress","show","LinearProgress","width","CustomerForm","addCustomer","newCustomer","firstName","lastName","getAPI","customer","baseState","catch","updatingInProgress","updatingError","updateCustomer","updatedCustomer","assign","setFirstName","setLastName","textFieldValueChange","event","target","trim","length","fn","ln","getFirstName","getLastName","firstNameValidationFailed","firstNameEdited","lastNameValidationFailed","lastNameEdited","addingInProgress","addingError","title","header","Dialog","aria-labelledby","maxWidth","DialogTitle","aria-label","closeButton","DialogContent","DialogContentText","noValidate","autoComplete","TextField","autoFocus","required","fullWidth","helperText","DialogActions","disabled","position","right","top","grey","CustomerDeleteDialog","deleteCustomer","deletingInProgress","deletingError","MoneyTransferDialog","initialState","transferAmount","targetCustomers","selectedCustomer","selectedAccount","transferAmountValidationFailed","transferAmountFieldEdited","loadingInProgress","customerSearchError","transactionError","searchCustomer","getAccountsForCustomer","customerNotFound","transferMoney","account","replace","addTransaction","val","isNaN","customerSelectionChange","accountSelectionChange","xs","onBlur","InputProps","endAdornment","InputAdornment","select","map","MenuItem","key","startAdornment","getCurrency","AccountListEntry","getBalance","getBalanceOfAccount","balance","loadingError","deleteAccount","onAccountDeleted","showMoneyTransferDialog","moneyTransferDialogClosed","prevProps","ListItem","accountEntry","Link","pathname","getCurrencyFormatter","format","ListItemSecondaryAction","buttonMargin","size","marginRight","fontSize","typography","pxToRem","flexBasis","flexShrink","CustomerListEntry","getAccounts","loadingAccountError","addAccount","addAccountForCustomer","addingAccountError","deleteAccountHandler","deletedAccount","filter","List","accountList","addAccountButton","marginBottom","bottom","expansionPanelStateChanged","onExpandedStateChange","editCustomerButtonClicked","stopPropagation","showCustomerForm","customerFormClosed","deleteCustomerButtonClicked","showCustomerDeleteDialog","deleteCustomerDialogClosed","onCustomerDeleted","expandedState","ExpansionPanel","defaultExpanded","expanded","ExpansionPanelSummary","expandIcon","aria-controls","alignItems","heading","ButtonGroup","ExpansionPanelDetails","AccountList","CustomerList","getCustomers","filteredCustomers","newID","expandedCustomerID","customerDeleted","newCustomrList","customerFromState","addCustomerButtonClicked","filterFieldValueChange","toLowerCase","firstNameContainsValue","includes","lastNameContainsValue","customerFilter","clearFilterFieldButtonClicked","expandedID","location","expandCustomer","customerFilterStr","withRouter","TransactionList","getTransactions","getCreditsForAccount","creditTransactionBOs","credit","setType","getDebitsForAccount","debitTransactionBOs","debit","concat","sort","transactionComparator","transactionsLoadingInProgress","debitsLoadingError","creditsLoadingError","transactionA","transactionB","currencyFormatter","TableRow","TableCell","scope","getSourceAccount","getTargetAccount","getType","Fragment","getAmount","renderTransactionRow","TableContainer","tableHeader","Table","TableHead","TableBody","renderTransactions","subNav","renderTransactionTable","marginLeft","useStyles","makeStyles","content","About","elevation","href","AccountDetail","getCustomer","AllAccountList","loadAccounts","getAllAccounts","getOwner","toString","white","createMuiTheme","black","primary","contrastText","dark","colors","indigo","main","light","secondary","blue","success","green","info","warning","orange","red","text","blueGrey","link","paper","icon","SignIn","handleSignInButtonClicked","onSignIn","App","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","handleAuthStateChange","authLoading","getIdToken","token","document","cookie","currentUser","authError","handleSignIn","provider","GoogleAuthProvider","signInWithRedirect","appError","initializeApp","languageCode","onAuthStateChanged","ThemeProvider","Theme","CssBaseline","basename","process","Container","from","exact","path","React","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.509d9e09.chunk.js","sourcesContent":["import React, { Component, createRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Popover, IconButton, Avatar, ClickAwayListener, withStyles, Typography, Paper, Button, Grid, Divider } from '@material-ui/core';\nimport firebase from 'firebase/app';\n\n/**\n * Shows a drop down list for the account infos and a possibility to log out. For closing the pop up menu if \n * the mouse is clicked outside the menu, the ClickAwayListener component is used.For logging out,\n * firebase.auth().signOut() method is used.\n * \n * @see See Material-UIs [Popover](https://material-ui.com/components/popover/)\n * @see See Material-UIs [ClickAwayListener](https://material-ui.com/components/click-away-listener/)\n * @see See Googles [firebase authentication](https://firebase.google.com/docs/web/setup)\n * @see See Googles [firebase API reference](https://firebase.google.com/docs/reference/js)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass ProfileDropDown extends Component {\n\n  // a refernce to the avatar button\n  #avatarButtonRef = createRef();\n\n  constructor(props) {\n    super(props);\n\n    // Init the state\n    this.state = {\n      open: false,\n    }\n  }\n\n  /** Handles click events on the avatar button and toggels visibility */\n  handleAvatarButtonClick = () => {\n    this.setState({\n      open: !this.state.open\n    });\n  }\n\n  /** \n   * Handles click events from the ClickAwayListener.\n   * \n   * @see See Material-UIs [ClickAwayListener](https://material-ui.com/components/click-away-listener/)\n   */\n  handleClose = () => {\n    this.setState({\n      open: false\n    });\n  }\n\n  /** \n\t * Handles the click event of the sign in button and uses the firebase.auth() component to sign in.\n\t * \n\t * @see See Google [firebase.auth](https://firebase.google.com/docs/reference/js/firebase.auth.Auth)\n\t * @see See Google [firebase.auth().signOut](https://firebase.google.com/docs/reference/js/firebase.auth.Auth#signout)\n\t */\n  handleSignOutButtonClicked = () => {\n    firebase.auth().signOut();\n  }\n\n  /** Renders the profile drop down if a loggin user is given as a prop */\n  render() {\n    const { classes, user } = this.props;\n    const { open } = this.state;\n\n    return (\n      user ?\n        <div>\n          <IconButton className={classes.avatarButton} ref={this.#avatarButtonRef} onClick={this.handleAvatarButtonClick}>\n            <Avatar src={user.photoURL} />\n          </IconButton>\n\n          <Popover open={open} anchorEl={this.#avatarButtonRef.current} onClose={this.handleClose}\n            anchorOrigin={{\n              vertical: 'top',\n              horizontal: 'left',\n            }}\n            transformOrigin={{\n              vertical: 'top',\n              horizontal: 'right',\n            }}>\n            <ClickAwayListener onClickAway={this.handleClose}>\n              <Paper className={classes.profileBox}>\n                <Typography align='center'>Hello</Typography>\n                <Divider className={classes.divider} />\n                <Typography align='center' variant='body2'>{user.displayName}</Typography>\n                <Typography align='center' variant='body2'>{user.email}</Typography>\n                <Divider className={classes.divider} />\n                <Grid container justify='center'>\n                  <Grid item>\n                    <Button color='primary' onClick={this.handleSignOutButtonClicked}>Logout</Button>\n                  </Grid>\n                </Grid>\n              </Paper>\n            </ClickAwayListener>\n          </Popover>\n        </div>\n        : null\n    )\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  avatarButton: {\n    float: 'right'\n  },\n  divider: {\n    margin: theme.spacing(1),\n  },\n  profileBox: {\n    padding: theme.spacing(1),\n    background: theme.palette.background.default,\n  }\n});\n\n/** PropTypes */\nProfileDropDown.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The logged in firesbase user */\n  user: PropTypes.object,\n}\n\nexport default withStyles(styles)(ProfileDropDown)\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Paper, Typography, Tabs, Tab } from '@material-ui/core';\nimport { Link as RouterLink } from 'react-router-dom';\nimport ProfileDropDown from '../dialogs/ProfileDropDown';\n\n/**\n * Shows the header with the main navigation Tabs within a Paper.\n * \n * @see See Material-UIs [Tabs](https://material-ui.com/components/tabs/)\n * @see See Material-UIs [Paper](https://material-ui.com/components/paper/)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass Header extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Init an empty state\n    this.state = {\n      tabindex: 0\n    };\n  }\n\n  /** Handles onChange events of the Tabs component */\n  handleTabChange = (e, newIndex) => {\n    // console.log(newValue)\n    this.setState({\n      tabindex: newIndex\n    })\n  };\n\n  /** Renders the component */\n  render() {\n    const { user } = this.props;\n\n    return (\n      <Paper variant='outlined' >\n        <ProfileDropDown user={user} />\n        <Typography variant='h3' component='h1' align='center'>\n          HdM Bank Administration\n        </Typography>\n        <Typography variant='h4' component='h2' align='center'>\n          Client Advisor Home\n        </Typography>\n        {\n          user ?\n            <Tabs indicatorColor='primary' textColor='primary' centered value={this.state.tabindex} onChange={this.handleTabChange} >\n              <Tab label='Customers' component={RouterLink} to={`/customers`} />\n              <Tab label='All Accounts' component={RouterLink} to={`/accounts`} />\n              <Tab label='About' component={RouterLink} to={`/about`} />\n            </Tabs>\n            : null\n        }\n      </Paper>\n    )\n  }\n}\n\n/** PropTypes */\nHeader.propTypes = {\n  /** The logged in firesbase user */\n  user: PropTypes.object,\n}\n\nexport default Header;","export default class BusinessObject {\n\n   constructor() {\n        this.id = 0;\n   }\n\n    setID(id) {\n        this.id = id\n    }\n\n    getID() {\n        return this.id\n    }\n\n    toString() {\n        let result = ''\n        for (var prop in this) {\n            result += prop + ': ' + this[prop] + ' ';\n        }\n        return result;\n    }\n\n}","import BusinessObject from './BusinessObject';\n\nexport default class CustomerBO extends BusinessObject {\n\n   constructor(first, last) {\n        super();\n        this.first_name = first;\n        this.last_name = last;\n   }\n\n    setFirstName(name) {\n        this.first_name = name\n    }\n\n    getFirstName() {\n        return this.first_name\n    }\n\n    setLastName(name) {\n        this.last_name = name\n    }\n\n    getLastName() {\n        return this.last_name\n    }\n\n    /*\n    Nutzungsmöglichkeit:\n\n        let outputHTML = '';\n        customers = Customer.fromJSON(this.responseText);\n        customers.forEach((c) => {\n            outputHTML += '<div class='customer'>' + c.getFirstName() + ' ' + c.getLastName() + '</div>';\n        });\n\n    */\n\n    // Returns an Array of CustomerBOs from a given JSON structure\n    static fromJSON(customers) {\n        let result = [];\n\n        if (Array.isArray(customers)) {\n            customers.forEach((c) => {\n                Object.setPrototypeOf(c, CustomerBO.prototype)\n                result.push(c)\n            })\n        } else {\n            // Es handelt sich offenbar um ein singuläres Objekt\n            let c = customers;\n            Object.setPrototypeOf(c, CustomerBO.prototype)\n            result.push(c)\n        }\n\n        return result;\n    }\n\n}","import BusinessObject from './BusinessObject';\n\nexport default class TransactionBO extends BusinessObject {\n\n    static TYPE_CREDIT = 'credit';\n    static TYPE_DEBIT = 'debit';\n\n    constructor(sourceID, targetID, amount) {\n        super();\n        this.source_account = sourceID;\n        this.target_account = targetID;\n        this.amount = amount;\n    }\n\n    setSourceAccount(sourceID) {\n        this.source_account = sourceID;\n    }\n\n    getSourceAccount() {\n        return this.source_account;\n    }\n\n    setTargetAccount(targetID) {\n        this.target_account = targetID;\n    }\n\n    getTargetAccount() {\n        return this.target_account;\n    }\n\n    setType(type) {\n        this.type = type;\n    }\n\n    getType() {\n        return this.type;\n    }\n\n    setAmount(amount) {\n        this.amount = amount;\n    }\n\n    getAmount() {\n        return this.amount;\n    }\n\n    // Returns an Array of TransactionBOs from a given JSON structure\n    static fromJSON(transactions) {\n        let result = [];\n\n        if (Array.isArray(transactions)) {\n            transactions.forEach((t) => {\n                Object.setPrototypeOf(t, TransactionBO.prototype)\n                result.push(t)\n            })\n        } else {\n            // Es handelt sich offenbar um ein singuläres Objekt\n            let t = transactions\n            Object.setPrototypeOf(t, TransactionBO.prototype)\n            result.push(t)\n        }\n\n        return result;\n    }\n\n}\n\n","import BusinessObject from './BusinessObject';\n\nexport default class AccountBO extends BusinessObject {\n\n   constructor(o) {\n        super();\n        this.owner = o;\n   }\n\n    setOwner(o) {\n        this.owner = o\n    }\n\n    getOwner() {\n        return this.owner\n    }\n\n    // Returns an Array of AccountBOs from a given JSON structure\n    static fromJSON(accounts) {\n        let result = [];\n\n        if (Array.isArray(accounts)) {\n            accounts.forEach((a) => {\n                Object.setPrototypeOf(a, AccountBO.prototype)\n                result.push(a)\n            })\n        } else {\n            // Es handelt sich offenbar um ein singuläres Objekt\n            let a = accounts\n            Object.setPrototypeOf(a, AccountBO.prototype)\n            result.push(a)\n        }\n\n        return result;\n    }\n\n}","import CustomerBO from './CustomerBO';\nimport TransactionBO from './TransactionBO';\nimport AccountBO from './AccountBO';\n\n/**\n * Abstracts the REST interface of the Python backend with convenient access methods.\n * The class is implemented as a singleton. \n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nexport default class BankAPI {\n\n    // Singelton instance\n    static #api = null;\n\n\n    // Local Python backend\n    #bankServerBaseURL = '/bank';\n\n    // Local http-fake-backend \n    //#bankServerBaseURL = '/api/bank';\n\n    #currencyFormatter = new Intl.NumberFormat('de-DE', {\n        style: 'currency',\n        currency: 'EUR'\n    });\n\n    #currency = '€';\n\n    // Customer related\n    #getCustomersURL = () => `${this.#bankServerBaseURL}/customers`;\n    #addCustomerURL = () => `${this.#bankServerBaseURL}/customers`;\n    #getCustomerURL = (id) => `${this.#bankServerBaseURL}/customers/${id}`;\n    #updateCustomerURL = (id) => `${this.#bankServerBaseURL}/customers/${id}`;\n    #deleteCustomerURL = (id) => `${this.#bankServerBaseURL}/customers/${id}`;\n    #searchCustomerURL = (customerName) => `${this.#bankServerBaseURL}/customers-by-name/${customerName}`;\n\n\n    // Account related\n    #getAllAccountsURL = () => `${this.#bankServerBaseURL}/accounts`;\n    #getAccountsForCustomerURL = (id) => `${this.#bankServerBaseURL}/customers/${id}/accounts`;\n    #addAccountsForCustomerURL = (id) => `${this.#bankServerBaseURL}/customers/${id}/accounts`;\n    #getBalanceForAccountURL = (id) => `${this.#bankServerBaseURL}/accounts/${id}/balance`;\n    #deleteAccountIdURL = (id) => `${this.#bankServerBaseURL}/accounts/${id}`;\n\n    // Transaction related\n    #getCreditsForAccountIdURL = (id) => `${this.#bankServerBaseURL}/account/${id}/credits`;\n    #getDebitsForAccountIdURL = (id) => `${this.#bankServerBaseURL}/account/${id}/debits`;\n    #addTransactionURL = () => `${this.#bankServerBaseURL}/transactions`;\n\n    /** \n     * Get the Singelton instance \n     * \n     * @public\n     */\n    static getAPI() {\n        if (this.#api == null) {\n            this.#api = new BankAPI();\n        }\n        return this.#api;\n    }\n\n    /**\n     *  Returns a Promise which resolves to a json object. \n     *  The Promise returned from fetch() won’t reject on HTTP error status even if the response is an HTTP 404 or 500. \n     *  fetchAdvanced throws an Error also an server status errors\n     */\n    #fetchAdvanced = (url, init) => fetch(url, init)\n        .then(res => {\n            // The Promise returned from fetch() won’t reject on HTTP error status even if the response is an HTTP 404 or 500. \n            if (!res.ok) {\n                throw Error(`${res.status} ${res.statusText}`);\n            }\n            return res.json();\n        }\n    )\n\n    /**\n     * Returns a formatter to format currencys of the transactions\n     * \n     * @public\n     */\n    getCurrencyFormatter() {\n        return this.#currencyFormatter;\n    }\n\n    /**\n     * Returns the code for the currency\n     * \n     * @public \n     */\n    getCurrency() {\n        return this.#currency;\n    }\n\n    /**\n     * Returns a Promise, which resolves to an Array of CustomerBOs\n     * \n     * @public\n     */\n    getCustomers() {\n        return this.#fetchAdvanced(this.#getCustomersURL()).then((responseJSON) => {\n            let customerBOs = CustomerBO.fromJSON(responseJSON);\n            // console.info(customerBOs);\n            return new Promise(function (resolve) {\n                resolve(customerBOs);\n            })\n        })\n    }\n\n    /**\n     * Returns a Promise, which resolves to a CustomerBO\n     * \n     * @param {Number} customerID to be retrieved\n     * @public\n     */\n    getCustomer(customerID) {\n        return this.#fetchAdvanced(this.#getCustomerURL(customerID)).then((responseJSON) => {\n            // We always get an array of CustomerBOs.fromJSON, but only need one object\n            let responseCustomerBO = CustomerBO.fromJSON(responseJSON)[0];\n            // console.info(responseCustomerBO);\n            return new Promise(function (resolve) {\n                resolve(responseCustomerBO);\n            })\n        })\n    }\n\n    /**\n     * Adds a customer and returns a Promise, which resolves to a new CustomerBO object with the \n     * firstName and lastName of the parameter customerBO object.\n     * \n     * @param {CustomerBO} customerBO to be added. The ID of the new customer is set by the backend\n     * @public\n     */\n    addCustomer(customerBO) {\n        return this.#fetchAdvanced(this.#addCustomerURL(), {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json, text/plain',\n                'Content-type': 'application/json',\n            },\n            body: JSON.stringify(customerBO)\n        }).then((responseJSON) => {\n            // We always get an array of CustomerBOs.fromJSON, but only need one object\n            let responseCustomerBO = CustomerBO.fromJSON(responseJSON)[0];\n            // console.info(accountBOs);\n            return new Promise(function (resolve) {\n                resolve(responseCustomerBO);\n            })\n        })\n    }\n\n    /**\n     * Updates a customer and returns a Promise, which resolves to a CustomerBO.\n     * \n     * @param {CustomerBO} customerBO to be updated\n     * @public\n     */\n    updateCustomer(customerBO) {\n        return this.#fetchAdvanced(this.#updateCustomerURL(customerBO.getID()), {\n            method: 'PUT',\n            headers: {\n                'Accept': 'application/json, text/plain',\n                'Content-type': 'application/json',\n            },\n            body: JSON.stringify(customerBO)\n        }).then((responseJSON) => {\n            // We always get an array of CustomerBOs.fromJSON\n            let responseCustomerBO = CustomerBO.fromJSON(responseJSON)[0];\n            // console.info(accountBOs);\n            return new Promise(function (resolve) {\n                resolve(responseCustomerBO);\n            })\n        })\n    }\n\n    /**\n     * Returns a Promise, which resolves to an Array of AccountBOs\n     * \n     * @param {Number} customerID to be deleted\n     * @public\n     */\n    deleteCustomer(customerID) {\n        return this.#fetchAdvanced(this.#deleteCustomerURL(customerID), {\n            method: 'DELETE'\n        }).then((responseJSON) => {\n            // We always get an array of CustomerBOs.fromJSON\n            let responseCustomerBO = CustomerBO.fromJSON(responseJSON)[0];\n            // console.info(accountBOs);\n            return new Promise(function (resolve) {\n                resolve(responseCustomerBO);\n            })\n        })\n    }\n\n    /**\n     * Returns a Promise, which resolves to an Array of AccountBOs\n     * \n     * @param {Number} customerID to be deleted\n     * @public\n     */\n    searchCustomer(customerName) {\n        return this.#fetchAdvanced(this.#searchCustomerURL(customerName)).then((responseJSON) => {\n            let customerBOs = CustomerBO.fromJSON(responseJSON);\n            // console.info(customerBOs);\n            return new Promise(function (resolve) {\n                resolve(customerBOs);\n            })\n        })\n    }\n\n\n    /**\n     * Returns a Promise, which resolves to an Array of AccountBOs\n     * \n     * @param {Number} customerID for which the the accounts should be retrieved\n     * @public\n     */\n    getAllAccounts() {\n        return this.#fetchAdvanced(this.#getAllAccountsURL())\n            .then((responseJSON) => {\n                let accountBOs = AccountBO.fromJSON(responseJSON);\n                // console.info(accountBOs);\n                return new Promise(function (resolve) {\n                    resolve(accountBOs);\n                })\n            })\n    }\n\n\n    /**\n     * Returns a Promise, which resolves to an Array of AccountBOs\n     * \n     * @param {Number} customerID for which the the accounts should be retrieved\n     * @public\n     */\n    getAccountsForCustomer(customerID) {\n        return this.#fetchAdvanced(this.#getAccountsForCustomerURL(customerID))\n            .then((responseJSON) => {\n                let accountBOs = AccountBO.fromJSON(responseJSON);\n                // console.info(accountBOs);\n                return new Promise(function (resolve) {\n                    resolve(accountBOs);\n                })\n            })\n    }\n\n    /**\n     * Deletes the given account and returns a Promise, which resolves to an AccountBO\n     * \n     * @param accountID to be deleted\n     * @public\n     */\n    deleteAccount(accountID) {\n        return this.#fetchAdvanced(this.#deleteAccountIdURL(accountID), {\n            method: 'DELETE'\n        })\n            .then((responseJSON) => {\n                // We always get an array of AccountBO.fromJSON, but only need one object\n                let accountBOs = AccountBO.fromJSON(responseJSON)[0];\n                // console.info(accountBOs);\n                return new Promise(function (resolve) {\n                    resolve(accountBOs);\n                })\n            })\n    }\n\n    /**\n     * Returns a Promise, which resolves to an AccountBOs\n     * \n     * @param {Number} customerID for which the the accounts should be added to\n     * @public\n     */\n    addAccountForCustomer(customerID) {\n        return this.#fetchAdvanced(this.#addAccountsForCustomerURL(customerID), {\n            method: 'POST'\n        })\n            .then((responseJSON) => {\n                // We always get an array of AccountBO.fromJSON, but only need one object\n                let accountBO = AccountBO.fromJSON(responseJSON)[0];\n                // console.info(accountBO);\n                return new Promise(function (resolve) {\n                    // We expect only one new account\n                    resolve(accountBO);\n                })\n            })\n    }\n\n    /**\n     * Returns a Promise, which resolves to a balance\n     * \n     * @param {Number} accountID for which the balance should be retrieved\n     * @public\n     */\n    getBalanceOfAccount(accountBO) {\n        return this.#fetchAdvanced(this.#getBalanceForAccountURL(accountBO))\n            .then(responseJSON => {\n                // console.log(responseJSON)\n                return new Promise(function (resolve) {\n                    resolve(responseJSON);\n                })\n            })\n    }\n\n    /**\n     * Returns a Promise, which resolves to an Array of TransactionBOs\n     * \n     * @param {Number} accountID for which the credit transactions should be retrieved\n     * @public\n     */\n    getCreditsForAccount(accountID) {\n        return this.#fetchAdvanced(this.#getCreditsForAccountIdURL(accountID))\n            .then(responseJSON => {\n                let transactionBOs = TransactionBO.fromJSON(responseJSON);\n                // console.info(transactionBOs);\n                return new Promise(function (resolve) {\n                    resolve(transactionBOs);\n                })\n            })\n    }\n\n    /**\n     * Returns a Promise, which resolves to an Array of TransactionBOs\n     * \n     * @param {Number} accountID for which the debit transactions should be retrieved\n     * @public\n     */\n    getDebitsForAccount(accountID) {\n        return this.#fetchAdvanced(this.#getDebitsForAccountIdURL(accountID))\n            .then(responseJSON => {\n                let transactionBOs = TransactionBO.fromJSON(responseJSON);\n                // console.info(transactionBOs);\n                return new Promise(function (resolve) {\n                    resolve(transactionBOs);\n                })\n            })\n    }\n\n    /**\n     * Returns a Promise, which resolves to the new TransactionBO\n     * \n     * @param {TransactionBO} transaction object \n     * @public\n     */\n    addTransaction(transaction) {\n        return this.#fetchAdvanced(this.#addTransactionURL(), {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json, text/plain',\n                'Content-type': 'application/json',\n            },\n            body: JSON.stringify(transaction)\n        }).then((responseJSON) => {\n            // We always get an array of TransactionBO.fromJSON, but only need one object\n            let tansactionBO = TransactionBO.fromJSON(responseJSON)[0];\n            // console.info(accountBO);\n            return new Promise(function (resolve) {\n                // We expect only one new account\n                resolve(tansactionBO);\n            })\n        })\n    }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport AlertTitle from '@material-ui/lab/AlertTitle';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\n\n/**\n * Shows an in-line error message in a given component context,\n * if the error obejct is not null\n * \n * @See See Material-UIs [Alert](https://material-ui.com/api/alert/)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass ContextErrorMessage extends Component {\n  #standardText = 'This should not have happend. Soooo sorry...';\n\n  /** Renders the ContextErrorMessage if error object is not null  */\n  render() {\n    const { classes, error, contextErrorMsg, onReload } = this.props;\n\n    return (\n      (error !== null) ?\n        <Alert severity='error' className={classes.root}>\n          <div>\n            {this.#standardText}\n          </div>\n          <AlertTitle>\n            {contextErrorMsg}\n          </AlertTitle>\n          <div className={classes.margins}>\n            Error message (for debugging only) is:\n        </div>\n          <div>\n            {error.message}\n          </div>\n          {\n            onReload ?\n              <div className={classes.margins}>\n                <Button variant='contained' color='primary' startIcon={<AutorenewIcon />} onClick={onReload}>\n                  Reload\n            </Button>\n              </div>\n              : null\n          }\n        </Alert>\n        : null\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  margins: {\n    marginTop: theme.spacing(2)\n  }\n});\n\n/** PropTypes */ \nContextErrorMessage.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** \n   * The error object, which drives the error message \n   * If not null, the error message is shown \n   */\n  error: PropTypes.object,\n  /**  A contextual error message to be shown */\n  contextErrorMsg: PropTypes.string,\n  /** \n   * A reload handler for the onReload event, which occurs if the reload button is clicked. \n   * If given a reload button is shown \n   */\n  onReload: PropTypes.func\n}\n\nexport default withStyles(styles)(ContextErrorMessage);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, LinearProgress } from '@material-ui/core';\n\n/**\n * Shows a loading progress, if the show prop is true.\n * \n * @See See Materiel-UIs [Progress](https://material-ui.com/components/progress/)\n * @See See Materiel-UIs [LinearProgress](https://material-ui.com/api/linear-progress/)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass LoadingProgress extends Component {\n\n  /** Renders the component */\n  render() {\n    const { classes, show } = this.props;\n\n    return (\n      show ?\n        <div className={classes.root}>\n          <LinearProgress color='secondary' />\n        </div>\n        : null\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(2),\n  }\n});\n\n/** PropTypes */\nLoadingProgress.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** If true, the loading progress is rendered */\n  show: PropTypes.bool.isRequired,\n}\n\nexport default withStyles(styles)(LoadingProgress);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { BankAPI, CustomerBO } from '../../api';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\n\n\n/**\n * Shows a modal form dialog for a CustomerBO in prop customer. If the customer is set, the dialog is configured \n * as an edit dialog and the text fields of the form are filled from the given CustomerBO object. \n * If the customer is null, the dialog is configured as a new customer dialog and the textfields are empty.\n * In dependency of the edit/new state, the respective backend calls are made to update or create a customer. \n * After that, the function of the onClose prop is called with the created/update CustomerBO object as parameter.  \n * When the dialog is canceled, onClose is called with null.\n * \n * @see See Material-UIs [Dialog](https://material-ui.com/components/dialogs)\n * @see See Material-UIs [TextField](https://material-ui.com/components/text-fields//)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass CustomerForm extends Component {\n\n  constructor(props) {\n    super(props);\n\n    let fn = '', ln = '';\n    if (props.customer) {\n      fn = props.customer.getFirstName();\n      ln = props.customer.getLastName();\n    }\n\n    // Init the state\n    this.state = {\n      firstName: fn,\n      firstNameValidationFailed: false,\n      firstNameEdited: false,\n      lastName: ln,\n      lastNameValidationFailed: false,\n      lastNameEdited: false,\n      addingInProgress: false,\n      updatingInProgress: false,\n      addingError: null,\n      updatingError: null\n    };\n    // save this state for canceling\n    this.baseState = this.state;\n  }\n\n  /** Adds the customer */\n  addCustomer = () => {\n    let newCustomer = new CustomerBO(this.state.firstName, this.state.lastName);\n    BankAPI.getAPI().addCustomer(newCustomer).then(customer => {\n      // Backend call sucessfull\n      // reinit the dialogs state for a new empty customer\n      this.setState(this.baseState);\n      this.props.onClose(customer); // call the parent with the customer object from backend\n    }).catch(e =>\n      this.setState({\n        updatingInProgress: false,    // disable loading indicator \n        updatingError: e              // show error message\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      updatingInProgress: true,       // show loading indicator\n      updatingError: null             // disable error message\n    });\n  }\n\n  /** Updates the customer */\n  updateCustomer = () => {\n    // clone the original cutomer, in case the backend call fails\n    let updatedCustomer = Object.assign(new CustomerBO(), this.props.customer);\n    // set the new attributes from our dialog\n    updatedCustomer.setFirstName(this.state.firstName);\n    updatedCustomer.setLastName(this.state.lastName);\n    BankAPI.getAPI().updateCustomer(updatedCustomer).then(customer => {\n      this.setState({\n        updatingInProgress: false,              // disable loading indicator  \n        updatingError: null                     // no error message\n      });\n      // keep the new state as base state\n      this.baseState.firstName = this.state.firstName;\n      this.baseState.lastName = this.state.lastName;\n      this.props.onClose(updatedCustomer);      // call the parent with the new customer\n    }).catch(e =>\n      this.setState({\n        updatingInProgress: false,              // disable loading indicator \n        updatingError: e                        // show error message\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      updatingInProgress: true,                 // show loading indicator\n      updatingError: null                       // disable error message\n    });\n  }\n\n  /** Handles value changes of the forms textfields and validates them */\n  textFieldValueChange = (event) => {\n    const value = event.target.value;\n\n    let error = false;\n    if (value.trim().length === 0) {\n      error = true;\n    }\n\n    this.setState({\n      [event.target.id]: event.target.value,\n      [event.target.id + 'ValidationFailed']: error,\n      [event.target.id + 'Edited']: true\n    });\n  }\n\n  /** Handles the close / cancel button click event */\n  handleClose = () => {\n    // Reset the state\n    this.setState(this.baseState);\n    this.props.onClose(null);\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes, customer, show } = this.props;\n    const { firstName, firstNameValidationFailed, firstNameEdited, lastName, lastNameValidationFailed, lastNameEdited, addingInProgress,\n      addingError, updatingInProgress, updatingError } = this.state;\n\n    let title = '';\n    let header = '';\n\n    if (customer) {\n      // customer defindet, so ist an edit dialog\n      title = 'Update a customer';\n      header = `Customer ID: ${customer.getID()}`;\n    } else {\n      title = 'Create a new customer';\n      header = 'Enter customer data';\n    }\n\n    return (\n      show ?\n        <Dialog open={show} onClose={this.handleClose} aria-labelledby='form-dialog-title' maxWidth='xs'>\n          <DialogTitle id='form-dialog-title'>{title}\n            <IconButton aria-label='close' className={classes.closeButton} onClick={this.handleClose}>\n              <CloseIcon />\n            </IconButton>\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              {header}\n            </DialogContentText>\n            <form className={classes.root} noValidate autoComplete='off'>\n              <TextField autoFocus type='text' required fullWidth margin='normal' id='firstName' label='First name:' value={firstName} \n                onChange={this.textFieldValueChange} error={firstNameValidationFailed} \n                helperText={firstNameValidationFailed ? 'The first name must contain at least one character' : ' '} />\n              <TextField type='text' required fullWidth margin='normal' id='lastName' label='Last name:' value={lastName}\n                onChange={this.textFieldValueChange} error={lastNameValidationFailed}\n                helperText={lastNameValidationFailed ? 'The last name must contain at least one character' : ' '} />\n            </form>\n            <LoadingProgress show={addingInProgress || updatingInProgress} />\n            {\n              // Show error message in dependency of customer prop\n              customer ?\n                <ContextErrorMessage error={updatingError} contextErrorMsg={`The customer ${customer.getID()} could not be updated.`} onReload={this.updateCustomer} />\n                :\n                <ContextErrorMessage error={addingError} contextErrorMsg={`The customer could not be added.`} onReload={this.addCustomer} />\n            }\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color='secondary'>\n              Cancel\n            </Button>\n            {\n              // If a customer is given, show an update button, else an add button\n              customer ?\n                <Button disabled={firstNameValidationFailed || lastNameValidationFailed} variant='contained' onClick={this.updateCustomer} color='primary'>\n                  Update\n              </Button>\n                : <Button disabled={firstNameValidationFailed || !firstNameEdited || lastNameValidationFailed || !lastNameEdited} variant='contained' onClick={this.addCustomer} color='primary'>\n                  Add\n             </Button>\n            }\n          </DialogActions>\n        </Dialog>\n        : null\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n});\n\n/** PropTypes */\nCustomerForm.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The CustomerBO to be edited */\n  customer: PropTypes.object,\n  /** If true, the form is rendered */\n  show: PropTypes.bool.isRequired,\n  /**  \n   * Handler function which is called, when the dialog is closed.\n   * Sends the edited or created CustomerBO as parameter or null, if cancel was pressed.\n   *  \n   * Signature: onClose(CustomerBO customer);\n   */\n  onClose: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(CustomerForm);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { BankAPI } from '../../api';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\n\n/**\n * Shows a modal delete/cancle dialog, which asks for deleting a customer. The CustomerBO to be deleted must be given in prop customer. \n * In dependency of the user interaction (delete/cancel) the respective backendcall is made. After that, the function of the onClose prop \n * is called with the deleted CustomerBO object as parameter. When the dialog is canceled, onClose is called with null.\n * \n * @see See Material-UIs [Dialog](https://material-ui.com/components/dialogs)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass CustomerDeleteDialog extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Init the state\n    this.state = {\n      deletingInProgress: false,\n      deletingError: null\n    };\n  }\n\n  /** Delete the customer */\n  deleteCustomer = () => {\n    BankAPI.getAPI().deleteCustomer(this.props.customer.getID()).then(customer => {\n      this.setState({\n        deletingInProgress: false,              // disable loading indicator  \n        deletingError: null                     // no error message\n      });\n      this.props.onClose(this.props.customer);  // call the parent with the deleted customer\n    }).catch(e =>\n      this.setState({\n        deletingInProgress: false,              // disable loading indicator \n        deletingError: e                        // show error message\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      deletingInProgress: true,                 // show loading indicator\n      deletingError: null                       // disable error message\n    });\n  }\n\n  /** Handles the close / cancel button click event */\n  handleClose = () => {\n    // console.log(event);\n    this.props.onClose(null);\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes, customer, show } = this.props;\n    const { deletingInProgress, deletingError } = this.state;\n\n    return (\n      show ?\n        <Dialog open={show} onClose={this.handleClose} aria-labelledby='delete-dialog-title'>\n          <DialogTitle id='delete-dialog-title'>Delete customer\n            <IconButton aria-label='close' className={classes.closeButton} onClick={this.handleClose}>\n              <CloseIcon />\n            </IconButton>\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Really delete customer '{customer.getFirstName()} {customer.getLastName()}' (ID: {customer.getID()})?\n            </DialogContentText>\n            <LoadingProgress show={deletingInProgress} />\n            <ContextErrorMessage error={deletingError} contextErrorMsg={`The customer '${customer.getFirstName()} ${customer.getLastName()}' (ID: ${customer.getID()}) could not be deleted.`}\n              onReload={this.deleteCustomer} />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color='secondary'>\n              Cancel\n            </Button>\n            <Button variant='contained' onClick={this.deleteCustomer} color='primary'>\n              Delete\n            </Button> \n          </DialogActions>\n        </Dialog>\n        : null\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  }\n});\n\n/** PropTypes */\nCustomerDeleteDialog.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The CustomerBO to be deleted */\n  customer: PropTypes.object.isRequired,\n  /** If true, the dialog is rendered */\n  show: PropTypes.bool.isRequired,\n  /**  \n   * Handler function which is called, when the dialog is closed.\n   * Sends the deleted CustomerBO as parameter or null, if cancel was pressed.\n   *  \n   * Signature: onClose(CustomerBO customer);\n   */\n  onClose: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(CustomerDeleteDialog);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogContent, DialogTitle, TextField, Typography, InputAdornment, MenuItem, DialogActions, Grid } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { BankAPI, TransactionBO } from '../../api';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\n\n\n/**\n * Shows a modal form dialog for a CustomerBO in prop customer. If the customer is set, the dialog is configured \n * as an edit dialog and the text fields of the form are filled from the given CustomerBO object. \n * If the customer is null, the dialog is configured as a new customer dialog and the textfields are empty.\n * In dependency of the edit/new state, the respective backend calls are made to update or create a customer. \n * After that, the function of the onClose prop is called with the created/update CustomerBO object as parameter.  \n * When the dialog is canceled, onClose is called with null.\n * \n * @see See Material-UIs [Dialog](https://material-ui.com/components/dialogs)\n * @see See Material-UIs [TextField](https://material-ui.com/components/text-fields//)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass MoneyTransferDialog extends Component {\n\n  initialState = {\n    // TextField values\n    customerName: '',\n    transferAmount: '',\n    // search state is null\n    targetCustomers: [],\n    // The selected CustomerBO\n    selectedCustomer: null,\n    // Selected accountBO in the accounts array\n    selectedAccount: null,\n    // TextField validation errors\n    transferAmountValidationFailed: false,\n    transferAmountFieldEdited: false,\n    // Network states\n    loadingInProgress: false,\n    customerSearchError: null,\n    transactionError: null\n  };\n\n  constructor(props) {\n    super(props);\n\n    // Init the state\n    this.state = this.initialState;\n  }\n\n  /** Searches for customers with a customerName and loads the corresponding accounts */\n  searchCustomer = async () => {\n    const { customerName } = this.state;\n    if (customerName.length > 0) {\n      try {\n        // set loading to true\n        this.setState({\n          targetCustomers: [],              // Set empty array\n          selectedCustomer: null,               // the initial customer\n          loadingInProgress: true,              // show loading indicator\n          customerSearchError: null             // disable error message\n        });\n\n        // Load customers first\n        const customers = await BankAPI.getAPI().searchCustomer(customerName);\n\n        // load accounts of each customers step by step and inject the acounts into the CustomerBO\n        for (const customer of customers) {\n          // Load account for each found customer\n          let accounts = await BankAPI.getAPI().getAccountsForCustomer(customer.getID());\n          // Call sucessfull \n          customer.accounts = accounts;\n        }\n\n        // Init the selections \n        let selectedCustomer = null;\n        let selectedAccount = null;\n\n        if (customers.length > 0) {\n          selectedCustomer = customers[0];\n        }\n\n        if (selectedCustomer.accounts.length > 0) {\n          selectedAccount = selectedCustomer.accounts[0];\n        }\n\n        // Set the final state\n        this.setState({\n          targetCustomers: customers,\n          selectedCustomer: selectedCustomer, // the initially selected customer\n          selectedAccount: selectedAccount,   // the initially selected account\n          loadingInProgress: false,           // disable loading indicator \n          customerSearchError: null           // no error message\n        });\n      } catch (e) {\n        this.setState({\n          targetCustomers: [],              // Set empty array\n          selectedCustomer: null,\n          loadingInProgress: false,           // disable loading indicator \n          customerSearchError: e              // show error message\n        });\n      }\n    } else {\n      this.setState({\n        customerNotFound: true\n      });\n    }\n  }\n\n  /** Executes the requested transfer transaction */\n  transferMoney = () => {\n    const { account } = this.props;\n    const { selectedAccount, transferAmount } = this.state;\n    let amount = transferAmount.replace(/,/g, '.');\n\n    const transaction = new TransactionBO(account.getID(), selectedAccount.getID(), amount);\n\n    BankAPI.getAPI().addTransaction(transaction).then(transaction => {\n      this.setState({\n        loadingInProgress: false,        // disable loading indicator \n        transactionError: null             // show error message\n      });\n      this.handleClose(transaction);\n    }).catch(e => {\n      this.setState({\n        loadingInProgress: false,        // disable loading indicator \n        transactionError: e              // show error message\n      });\n    });\n    this.setState({\n      loadingInProgress: true,        // disable loading indicator \n      transactionError: null          // show error message\n    });\n  }\n\n  /** Handles the close / cancel button click event */\n  handleClose = (transaction) => {\n    // Reset the state\n    this.setState(this.initialState);\n    this.props.onClose(transaction);\n  }\n\n  /** Handles value changes of the forms textfields and validates the transferAmout field */\n  textFieldValueChange = (event) => {\n    const val = event.target.value;\n    // Validate the amount field\n    if (event.target.id === 'transferAmount') {\n      let result = false;\n      let amount = val.replace(/,/g, '.');\n      if (amount.length === 0) {\n        // length must not be 0\n        result = true;\n      }\n      if (isNaN(amount)) {\n        // Its not a numer in the text field\n        result = true;\n      }\n      this.setState({\n        transferAmountValidationFailed: result,\n        transferAmountFieldEdited: true\n      });\n    }\n    this.setState({\n      [event.target.id]: val\n    });\n  }\n\n  /** Handles value changes of the customer select textfield */\n  customerSelectionChange = (event) => {\n    let customer = event.target.value;\n    let selectedAccount = null;\n\n    if (customer.accounts.length > 0) {\n      selectedAccount = customer.accounts[0]\n    }\n\n    this.setState({\n      selectedCustomer: customer,\n      selectedAccount: selectedAccount,\n    });\n  }\n\n  /** Handles value changes of the customer select textfield */\n  accountSelectionChange = (event) => {\n    let selectedAccount = event.target.value;\n    this.setState({\n      selectedAccount: selectedAccount\n    });\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes, show, customer, account } = this.props;\n    const { customerName, targetCustomers, selectedCustomer, customerNotFound, selectedAccount, loadingInProgress,\n      transferAmountValidationFailed, transferAmountFieldEdited, customerSearchError, transactionError } = this.state;\n\n    return (\n      show ?\n        <Dialog open={show} onClose={this.handleClose} aria-labelledby='money-transfer-dialog-title' maxWidth='md'>\n          <DialogTitle id='form-dialog-title'>Transfer money\n            <IconButton aria-label='close' className={classes.closeButton} onClick={this.handleClose}>\n              <CloseIcon />\n            </IconButton>\n          </DialogTitle>\n          <DialogContent>\n            <Grid container spacing={1}>\n              <Grid item xs={6}>\n                <Typography variant='body1'>\n                  From customer: {customer.getLastName()}, {customer.getFirstName()}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant='body1'>\n                  Account: {account.getID()}\n                </Typography>\n              </Grid>\n            </Grid>\n            <Typography variant='body1'>\n              <br/>\n              to customer:\n            </Typography>\n\n            <form noValidate autoComplete='off'>\n              {\n                // show a search text field if there are no searchedCustomer yet\n                (targetCustomers.length === 0) ?\n                  <TextField autoFocus fullWidth margin='normal' type='text' required id='customerName' label='Customer name:'\n                    onChange={this.textFieldValueChange}\n                    onBlur={this.searchCustomer}\n                    error={customerNotFound}\n                    helperText={customerNotFound ? 'No customers with the given name have been found' : ' '}\n                    InputProps={{\n                      endAdornment: <InputAdornment position='end'>\n                        <IconButton onClick={this.searchCustomer}>\n                          <SearchIcon />\n                        </IconButton>\n                      </InputAdornment>,\n                    }} />\n                  :\n                  // Show a selection of targetCustomers, if there are any. Provide no search button. \n                  <TextField select autoFocus fullWidth margin='normal' type='text' required id='customerName' label='Customer name:'\n                    value={selectedCustomer}\n                    onChange={this.customerSelectionChange}>\n                    {\n                      this.state.targetCustomers.map((customer) => (\n                        <MenuItem key={customer.getID()} value={customer}>\n                          {customer.getLastName()}, {customer.getFirstName()}\n                        </MenuItem>\n                      ))\n                    }\n                  </TextField>\n              }\n              {\n                // Render the account select field\n                selectedAccount ?\n                  <TextField select fullWidth margin='normal' type='text' required id='account' label='Target account:'\n                    value={selectedAccount}\n                    onChange={this.accountSelectionChange}>\n                    {\n                      selectedCustomer.accounts.map((account) => (\n                        <MenuItem key={account.getID()} value={account}>\n                          {account.getID()}\n                        </MenuItem>\n                      ))\n                    }\n                  </TextField>\n                  :\n                  <TextField select fullWidth margin='normal' type='text' required id='account' label='Target account:'\n                    value={0}\n                    onChange={this.accountSelectionChange}>\n                    <MenuItem value={0}>\n                      No accounts found\n                  </MenuItem>\n                  </TextField>\n              }\n\n              <TextField fullWidth margin='normal' type='text' required id='transferAmount' label='Amount:'\n                onChange={this.textFieldValueChange}\n                error={transferAmountValidationFailed}\n                helperText={transferAmountValidationFailed ? 'The amount must be a number' : ' '}\n                InputProps={{\n                  startAdornment: <InputAdornment position='start'>{BankAPI.getAPI().getCurrency()}\n                  </InputAdornment>,\n                }}\n              />\n            </form>\n            <LoadingProgress show={loadingInProgress} />\n            <ContextErrorMessage error={customerSearchError} contextErrorMsg={`Customer ${customerName} could not be searched.`} onReload={this.searchCustomer} />\n            <ContextErrorMessage error={transactionError} contextErrorMsg={`Transaction could not be executed.`} onReload={this.transferMoney} />\n\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color='secondary'>\n              Cancel\n            </Button>\n            <Button disabled={!selectedCustomer || !selectedAccount || !transferAmountFieldEdited || transferAmountValidationFailed} variant='contained' color='primary' onClick={this.transferMoney}>\n              Transfer\n            </Button>\n          </DialogActions>\n        </Dialog>\n        : null\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  }\n});\n\n/** PropTypes */\nMoneyTransferDialog.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The CustomerBO for whom to transfer */\n  customer: PropTypes.object.isRequired,\n  /** The AccountBO from which to transfer */\n  account: PropTypes.object.isRequired,\n  /** If true, the form is rendered */\n  show: PropTypes.bool.isRequired,\n  /**  \n   * Handler function which is called, when the dialog is closed.\n   * Sends the performed TransactionBO as parameter or null, if cancel was pressed.\n   *  \n   * Signature: onClose(TransactionBO transaction);\n   */\n  onClose: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(MoneyTransferDialog);\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, ListItem, ListItemSecondaryAction, Link, Typography } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SwapHoriz from '@material-ui/icons/SwapHoriz';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { BankAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport MoneyTransferDialog from './dialogs/MoneyTransferDialog';\n\n\n/**\n * Renders a AccountBO object within a ListEntry and provides a delete button to delete it. Links accounts \n * to a list of transactions. This is done by routing the link to /transactions and passing the CustomerBO and\n * the AccountBO as props to the AccountList component.\n * \n * @see See Material-UIs [Lists](https://material-ui.com/components/lists/)\n * @see See Material-UIs [ListItem](https://material-ui.com/api/list-item/)\n * @see See Material-UIs [Link](https://material-ui.com/components/links/)\n * @see See Material-UIs React Router integration [Composition](https://material-ui.com/guides/composition/#link)\n * @see See React Router [ReactRouter](https://reacttraining.com/react-router/web/guides/quick-start)\n * @see See React Router [Link](https://reacttraining.com/react-router/web/api/Link)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass AccountListEntry extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Init an empty state\n    this.state = {\n      balance: '',\n      loadingInProgress: false,\n      deletingInProgress: false,\n      loadingError: null,\n      deletingError: null,\n      showMoneyTransferDialog: false,\n    };\n  }\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n  componentDidMount() {\n    // load initial balance\n    this.getBalance();\n  }\n\n  /** Lifecycle method, which is called when the component was updated */\n  componentDidUpdate(prevProps) {\n    if ((this.props.show) && (this.props.show !== prevProps.show)) {\n      this.getBalance();\n    }\n  }\n\n  /** gets the balance for this account */\n  getBalance = () => {\n    BankAPI.getAPI().getBalanceOfAccount(this.props.account.getID()).then(balance =>\n      this.setState({\n        balance: balance,\n        loadingInProgress: false, // loading indicator \n        loadingError: null\n      })).catch(e =>\n        this.setState({ // Reset state with error from catch \n          balance: null,\n          loadingInProgress: false,\n          loadingError: e\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      balance: 'loading',\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n\n  /** Deletes this account */\n  deleteAccount = () => {\n    const { account } = this.props;\n    BankAPI.getAPI().deleteAccount(account.getID()).then(() => {\n      this.setState({  // Set new state when AccountBOs have been fetched\n        deletingInProgress: false, // loading indicator \n        deletingError: null\n      })\n      // console.log(account);\n      this.props.onAccountDeleted(account);\n    }).catch(e =>\n      this.setState({ // Reset state with error from catch \n        deletingInProgress: false,\n        deletingError: e\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      deletingInProgress: true,\n      deletingError: null\n    });\n  }\n\n  /** Handles click events from the transfer money button */\n  transferMoney = () => {\n    this.setState({\n      showMoneyTransferDialog: true\n    });\n  }\n\n  /** Handles the onClose event from the transfer money dialog */\n  moneyTransferDialogClosed = (transaction) => {\n    this.setState({\n      showMoneyTransferDialog: false\n    });\n    if (transaction) {\n      // Transaction is not null and therefore was performed\n      this.getBalance();\n    }\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes, customer, account } = this.props;\n    const { loadingInProgress, deletingInProgress, loadingError, deletingError, balance, showMoneyTransferDialog } = this.state;\n\n    return (\n      <div>\n        <ListItem>\n          <Typography className={classes.accountEntry}>\n            <Link component={RouterLink} to={{\n              pathname: '/transactions',\n              owner: {\n                customer: customer,\n                account: account\n              }\n            }} >\n              Account ID: {account.getID()}\n            </Link>\n\n          </Typography>\n          <Typography color='textSecondary'>\n            Balance: {!isNaN(balance) ? BankAPI.getAPI().getCurrencyFormatter().format(balance) : balance}\n          </Typography>\n          <ListItemSecondaryAction>\n            <Button className={classes.buttonMargin} variant='outlined' color='primary' size='small' startIcon={<SwapHoriz />} onClick={this.transferMoney}>\n              Transfer\n            </Button>\n            <Button color='secondary' size='small' startIcon={<DeleteIcon />} onClick={this.deleteAccount}>\n              Delete\n            </Button>\n          </ListItemSecondaryAction>\n        </ListItem>\n        <ListItem>\n          <LoadingProgress show={loadingInProgress || deletingInProgress} />\n          <ContextErrorMessage error={loadingError} contextErrorMsg={`The balance of account ${account.getID()} could not be loaded.`} onReload={this.getBalance} />\n          <ContextErrorMessage error={deletingError} contextErrorMsg={`The account ${account.getID()} could not be deleted.`} onReload={this.deleteAccount} />\n        </ListItem>\n        <MoneyTransferDialog show={showMoneyTransferDialog} customer={customer} account={account} onClose={this.moneyTransferDialogClosed} />\n      </div>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%'\n  }, \n  buttonMargin: {\n    marginRight: theme.spacing(2),\n  },\n  accountEntry: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0,\n  }\n});\n\n/** PropTypes */\nAccountListEntry.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The CustomerBO of this AccountListEntry */\n  customer: PropTypes.object.isRequired,\n  /** The AccountBO to be rendered */\n  account: PropTypes.object.isRequired,\n  /**  \n   * Event Handler function which is called after a sucessfull delete of this account. \n   * \n   * Signature: onAccountDeleted(AccountBO account); \n   */\n  onAccountDeleted: PropTypes.func.isRequired,\n  /** If true, balance is (re)loaded */\n  show: PropTypes.bool.isRequired\n}\n\nexport default withStyles(styles)(AccountListEntry);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, ListItem } from '@material-ui/core';\nimport { Button, List } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport { BankAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport AccountListEntry from './AccountListEntry';\n\n/**\n * Renders a list of AccountListEntry objects.\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass CustomerListEntry extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Init the state\n    this.state = {\n      accounts: [],\n      loadingInProgress: false,\n      loadingAccountError: null,\n      addingAccountError: null,\n    };\n  }\n\n  /** Fetches AccountBOs for the current customer */\n  getAccounts = () => {\n    BankAPI.getAPI().getAccountsForCustomer(this.props.customer.getID()).then(accountBOs =>\n      this.setState({  // Set new state when AccountBOs have been fetched\n        accounts: accountBOs,\n        loadingInProgress: false, // loading indicator \n        loadingAccountError: null\n      })).catch(e =>\n        this.setState({ // Reset state with error from catch \n          accounts: [],\n          loadingInProgress: false,\n          loadingAccountError: e\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingAccountError: null\n    });\n  }\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n  componentDidMount() {\n    this.getAccounts();\n  }\n\n  /** Lifecycle method, which is called when the component was updated */\n  componentDidUpdate(prevProps) {\n    // reload accounts if shown state changed. Occures if the CustomerListEntrys ExpansionPanel was expanded\n    // if ((this.props.show !== prevProps.show)) {\n    //   this.getAccounts();\n    // }\n  }\n\n  /** Adds an account for the current customer */\n  addAccount = () => {\n    BankAPI.getAPI().addAccountForCustomer(this.props.customer.getID()).then(accountBO => {\n      // console.log(accountBO)\n      this.setState({  // Set new state when AccountBOs have been fetched\n        accounts: [...this.state.accounts, accountBO],\n        loadingInProgress: false, // loading indicator \n        addingAccountError: null\n      })\n    }).catch(e =>\n      this.setState({ // Reset state with error from catch \n        accounts: [],\n        loadingInProgress: false,\n        addingAccountError: e\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      addingAccountError: null\n    });\n  }\n\n  /** Handles onAccountDelete events from an AccountListEntry  */\n  deleteAccountHandler = (deletedAccount) => {\n    // console.log(deletedAccount.getID());\n    this.setState({\n      accounts: this.state.accounts.filter(account => account.getID() !== deletedAccount.getID())\n    })\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes, customer } = this.props;\n    // Use the states customer\n    const { accounts, loadingInProgress, loadingAccountError, addingAccountError } = this.state;\n\n    // console.log(this.props);\n    return (\n      <div className={classes.root}>\n        <List className={classes.accountList}>\n          {\n            accounts.map(account => <AccountListEntry key={account.getID()} customer={customer} account={account} onAccountDeleted={this.deleteAccountHandler}\n              show={this.props.show} />)\n          }\n          <ListItem>\n            <LoadingProgress show={loadingInProgress} />\n            <ContextErrorMessage error={loadingAccountError} contextErrorMsg={`List of accounts for customer ${customer.getID()} could not be loaded.`} onReload={this.getAccounts} />\n            <ContextErrorMessage error={addingAccountError} contextErrorMsg={`Account for customer ${customer.getID()} could not be added.`} onReload={this.addAccount} />\n          </ListItem>\n        </List>\n        <Button className={classes.addAccountButton} variant='contained' color='primary' startIcon={<AddIcon />} onClick={this.addAccount}>\n          Add Account\n        </Button>\n      </div>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  accountList: {\n    marginBottom: theme.spacing(2),\n  },\n  addAccountButton: {\n    position: 'absolute',\n    right: theme.spacing(3),\n    bottom: theme.spacing(1),\n  }\n});\n\n/** PropTypes */\nCustomerListEntry.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The CustomerBO of this AccountList */\n  customer: PropTypes.object.isRequired,\n  /** If true, accounts are (re)loaded */\n  show: PropTypes.bool.isRequired\n}\n\nexport default withStyles(styles)(CustomerListEntry);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Typography, ExpansionPanel, ExpansionPanelSummary, ExpansionPanelDetails, Grid } from '@material-ui/core';\nimport { Button, ButtonGroup } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport CustomerForm from './dialogs/CustomerForm';\nimport CustomerDeleteDialog from './dialogs/CustomerDeleteDialog';\nimport AccountList from './AccountList';\n\n\n/**\n * Renders a CustomerBO object within a expandable/collapsible list entry\n * If expanded, it loads the account list only if expadend.\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass CustomerListEntry extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Init the state\n    this.state = {\n      customer: props.customer,\n      showCustomerForm: false,\n      showCustomerDeleteDialog: false,\n    };\n  }\n\n  /** Handles onChange events of the underlying ExpansionPanel */\n  expansionPanelStateChanged = () => {\n    this.props.onExpandedStateChange(this.props.customer);\n  }\n\n  /** Handles onAccountDelete events from an AccountListEntry  */\n  deleteAccountHandler = (deletedAccount) => {\n    // console.log(deletedAccount.getID());\n    this.setState({\n      accounts: this.state.accounts.filter(account => account.getID() !== deletedAccount.getID())\n    })\n  }\n\n  /** Handles the onClick event of the edit customer button */\n  editCustomerButtonClicked = (event) => {\n    event.stopPropagation();\n    this.setState({\n      showCustomerForm: true\n    });\n  }\n\n  /** Handles the onClose event of the CustomerForm */\n  customerFormClosed = (customer) => {\n    // customer is not null and therefor changed\n    if (customer) {\n      this.setState({\n        customer: customer,\n        showCustomerForm: false\n      });\n    } else {\n      this.setState({\n        showCustomerForm: false\n      });\n    }\n  }\n\n  /** Handles the onClick event of the delete customer button */\n  deleteCustomerButtonClicked = (event) => {\n    event.stopPropagation();\n    this.setState({\n      showCustomerDeleteDialog: true\n    });\n  }\n\n  /** Handles the onClose event of the CustomerDeleteDialog */\n  deleteCustomerDialogClosed = (customer) => {\n    // if customer is not null, delete it\n    if (customer) {\n      this.props.onCustomerDeleted(customer);\n    };\n\n    // Don´t show the dialog\n    this.setState({\n      showCustomerDeleteDialog: false\n    });\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes, expandedState } = this.props;\n    // Use the states customer\n    const { customer, showCustomerForm, showCustomerDeleteDialog } = this.state;\n\n    // console.log(this.state);\n    return (\n      <div>\n        <ExpansionPanel defaultExpanded={false} expanded={expandedState} onChange={this.expansionPanelStateChanged}>\n          <ExpansionPanelSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls={`customer${customer.getID()}accountpanel-content`}\n            id={`customer${customer.getID()}accountpanel-header`}\n          >\n            <Grid container spacing={1} justify='flex-start' alignItems='center'>\n              <Grid item>\n                <Typography variant='body1' className={classes.heading}>{customer.getLastName()}, {customer.getFirstName()}\n                </Typography>\n              </Grid>\n              <Grid item>\n                <ButtonGroup variant='text' size='small'>\n                  <Button color='primary' onClick={this.editCustomerButtonClicked}>\n                    edit\n                  </Button>\n                  <Button color='secondary' onClick={this.deleteCustomerButtonClicked}>\n                    delete\n                  </Button>\n                </ButtonGroup>\n              </Grid>\n              <Grid item xs />\n              <Grid item>\n                <Typography variant='body2' color={'textSecondary'}>List of accounts</Typography>\n              </Grid>\n            </Grid>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n            <AccountList show={expandedState} customer={customer} />\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n        <CustomerForm show={showCustomerForm} customer={customer} onClose={this.customerFormClosed} />\n        <CustomerDeleteDialog show={showCustomerDeleteDialog} customer={customer} onClose={this.deleteCustomerDialogClosed} />\n      </div>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  }\n});\n\n/** PropTypes */\nCustomerListEntry.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The CustomerBO to be rendered */\n  customer: PropTypes.object.isRequired,\n  /** The state of this CustomerListEntry. If true the customer is shown with its accounts */\n  expandedState: PropTypes.bool.isRequired,\n  /** The handler responsible for handle expanded state changes (exanding/collapsing) of this CustomerListEntry \n   * \n   * Signature: onExpandedStateChange(CustomerBO customer)\n   */\n  onExpandedStateChange: PropTypes.func.isRequired,\n  /** \n   *  Event Handler function which is called after a sucessfull delete of this customer.\n   * \n   * Signature: onCustomerDelete(CustomerBO customer)\n   */\n  onCustomerDeleted: PropTypes.func.isRequired\n}\n\nexport default withStyles(styles)(CustomerListEntry);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, TextField, InputAdornment, IconButton, Grid, Typography } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport ClearIcon from '@material-ui/icons/Clear'\nimport { withRouter } from 'react-router-dom';\nimport { BankAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport CustomerForm from './dialogs/CustomerForm';\nimport CustomerListEntry from './CustomerListEntry';\n\n/**\n * Controlls a list of CustomerListEntrys to create a accordion.  \n * \n * @See See [CustomerListEntry](#customerlistentry)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass CustomerList extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // console.log(props);\n    let expandedID = null;\n\n    if (this.props.location.expandCustomer) {\n      expandedID = this.props.location.expandCustomer.getID();\n    }\n\n    // Init an empty state\n    this.state = {\n      customers: [],\n      filteredCustomers: [],\n      customerFilterStr: '',\n      error: null,\n      loadingInProgress: false,\n      expandedCustomerID: expandedID,\n      showCustomerForm: false\n    };\n  }\n\n  /** Fetches all CustomerBOs from the backend */\n  getCustomers = () => {\n    BankAPI.getAPI().getCustomers()\n      .then(customerBOs =>\n        this.setState({               // Set new state when CustomerBOs have been fetched\n          customers: customerBOs,\n          filteredCustomers: [...customerBOs], // store a copy\n          loadingInProgress: false,   // disable loading indicator \n          error: null\n        })).catch(e =>\n          this.setState({             // Reset state with error from catch \n            customers: [],\n            loadingInProgress: false, // disable loading indicator \n            error: e\n          })\n        );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      error: null\n    });\n  }\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n  componentDidMount() {\n    this.getCustomers();\n  }\n\n  /** \n   * Handles onExpandedStateChange events from the CustomerListEntry component. Toggels the expanded state of \n   * the CustomerListEntry of the given CustomerBO.\n   * \n   * @param {customer} CustomerBO of the CustomerListEntry to be toggeled\n   */\n  onExpandedStateChange = customer => {\n    // console.log(customerID);\n    // Set expandend customer entry to null by default\n    let newID = null;\n\n    // If same customer entry is clicked, collapse it else expand a new one\n    if (customer.getID() !== this.state.expandedCustomerID) {\n      // Expand the customer entry with customerID\n      newID = customer.getID();\n    }\n    // console.log(newID);\n    this.setState({\n      expandedCustomerID: newID,\n    });\n  }\n\n  /** \n   * Handles onCustomerDeleted events from the CustomerListEntry component\n   * \n   * @param {customer} CustomerBO of the CustomerListEntry to be deleted\n   */\n  customerDeleted = customer => {\n    const newCustomrList = this.state.customers.filter(customerFromState => customerFromState.getID() !== customer.getID());\n    this.setState({\n      customers: newCustomrList,\n      filteredCustomers: [...newCustomrList],\n      showCustomerForm: false\n    });\n  }\n\n  /** Handles the onClick event of the add customer button */\n  addCustomerButtonClicked = event => {\n    // Do not toggle the expanded state\n    event.stopPropagation();\n    //Show the CustmerForm\n    this.setState({\n      showCustomerForm: true\n    });\n  }\n\n  /** Handles the onClose event of the CustomerForm */\n  customerFormClosed = customer => {\n    // customer is not null and therefore created\n    if (customer) {\n      const newCustomrList = [...this.state.customers, customer];\n      this.setState({\n        customers: newCustomrList,\n        filteredCustomers: [...newCustomrList],\n        showCustomerForm: false\n      });\n    } else {\n      this.setState({\n        showCustomerForm: false\n      });\n    }\n  }\n\n  /** Handels onChange events of the customer filter text field */\n  filterFieldValueChange = event => {\n    const value = event.target.value.toLowerCase();\n    this.setState({\n      filteredCustomers: this.state.customers.filter(customer => {\n        let firstNameContainsValue = customer.getFirstName().toLowerCase().includes(value);\n        let lastNameContainsValue = customer.getLastName().toLowerCase().includes(value);\n        return firstNameContainsValue || lastNameContainsValue;\n      }),\n      customerFilter: value\n    });\n  }\n\n  /** Handles the onClose event of the clear filter button */\n  clearFilterFieldButtonClicked = () => {\n    // Reset the filter\n    this.setState({\n      filteredCustomers: [...this.state.customers],\n      customerFilter: ''\n    });\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes } = this.props;\n    const { filteredCustomers, customerFilter, expandedCustomerID, loadingInProgress, error, showCustomerForm } = this.state;\n\n    return (\n      <div className={classes.root}>\n        <Grid className={classes.customerFilter} container spacing={1} justify='flex-start' alignItems='center'>\n          <Grid item>\n            <Typography>\n              Filter customer list by name:\n              </Typography>\n          </Grid>\n          <Grid item xs={4}>\n            <TextField\n              autoFocus\n              fullWidth\n              id='customerFilter'\n              type='text'\n              value={customerFilter}\n              onChange={this.filterFieldValueChange}\n              InputProps={{\n                endAdornment: <InputAdornment position='end'>\n                  <IconButton onClick={this.clearFilterFieldButtonClicked}>\n                    <ClearIcon />\n                  </IconButton>\n                </InputAdornment>,\n              }}\n            />\n          </Grid>\n          <Grid item xs />\n          <Grid item>\n            <Button variant='contained' color='primary' startIcon={<AddIcon />} onClick={this.addCustomerButtonClicked}>\n              Add Customer\n          </Button>\n          </Grid>\n        </Grid>\n        { \n          // Show the list of CustomerListEntry components\n          // Do not use strict comparison, since expandedCustomerID maybe a string if given from the URL parameters\n          filteredCustomers.map(customer =>\n            <CustomerListEntry key={customer.getID()} customer={customer} expandedState={expandedCustomerID === customer.getID()}\n              onExpandedStateChange={this.onExpandedStateChange}\n              onCustomerDeleted={this.customerDeleted}\n            />)\n        }\n        <LoadingProgress show={loadingInProgress} />\n        <ContextErrorMessage error={error} contextErrorMsg={`The list of customers could not be loaded.`} onReload={this.getCustomers} />\n        <CustomerForm show={showCustomerForm} onClose={this.customerFormClosed} />\n      </div>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  customerFilter: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(1),\n  }\n});\n\n/** PropTypes */\nCustomerList.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** @ignore */\n  location: PropTypes.object.isRequired,\n}\n\nexport default withRouter(withStyles(styles)(CustomerList));","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Typography, TableContainer, Table, TableHead, TableCell, Paper, TableRow, TableBody, Link, Grid } from '@material-ui/core';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { withRouter, Redirect } from 'react-router';\nimport { BankAPI, TransactionBO } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\n\n/**\n * Querys lists of credit and debit TransactionBOs for an account of a customer from the backend.\n * The customers CustomerBO and AccountBO is recieved in the this.props.location.owner object as passed\n * by the AccountListEntry component through the React Router Link. \n * \n * @See See [CustomerListEntry](#customerlistentry)\n * @see See React Router [ReactRouter](https://reacttraining.com/react-router/web/guides/quick-start)\n * @see See React Router [Link](https://reacttraining.com/react-router/web/api/Link)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass TransactionList extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Init an empty state\n    this.state = {\n      transactions: [],\n      transactionsLoadingInProgress: false,\n      creditsLoadingError: null,\n      debitsLoadingError: null,\n    };\n  }\n\n  /**\n   * Compares two TransactioBOs to sort them by their id field. Sorts the lowest id first.\n   * \n   * Returns -1 if a < b\n   * Returns 1 if a > b\n   * Returns 0 if a = b\n   * \n   * @param {TransactionBO} transactionA \n   * @param {TransactionBO} transactionB \n   */\n  transactionComparator(transactionA, transactionB) {\n    let result = 0;\n\n    if (transactionA.getID() < transactionB.getID()) {\n      result = -1;\n    }\n    if (transactionA.getID() > transactionB.getID()) {\n      result = 1;\n    }\n\n    return result;\n  }\n\n  /** \n   * Fetches credit and debit TransactionBOs from the backend. The two operations are chained. \n   * Credit and debit transactions are marked with the transaction type and then concatinated into one array \n   * of transactions. This array is then sorted with the transactionComparator function. \n   */\n  getTransactions = () => {\n    const { account } = this.props.location.owner;\n\n    BankAPI.getAPI().getCreditsForAccount(account.getID())\n      .then(creditTransactionBOs => {\n        // Set transaction type to credit\n        creditTransactionBOs.forEach(credit => credit.setType(TransactionBO.TYPE_CREDIT));\n\n        BankAPI.getAPI().getDebitsForAccount(account.getID()).then(debitTransactionBOs => {\n          // Set transaction type to debit\n          debitTransactionBOs.forEach(debit => debit.setType(TransactionBO.TYPE_DEBIT));\n\n          let transactions = creditTransactionBOs.concat(debitTransactionBOs);\n\n          transactions.sort(this.transactionComparator);\n\n          // set final state\n          this.setState({\n            transactions: transactions,\n            transactionsLoadingInProgress: false,\n            debitsLoadingError: null\n          })\n        }).catch(e => this.setState({\n          transactions: [],\n          debitsLoadingError: e,\n          transactionsLoadingInProgress: false,\n        }));\n\n        // set inter state\n        this.setState({\n          creditsLoadingError: null,\n        })\n      }).catch(e =>\n        this.setState({\n          transactions: [],\n          transactionsLoadingInProgress: false,\n          creditsLoadingError: e\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      transactionsLoadingInProgress: true,\n      creditsLoadingError: null,\n      debitsLoadingError: null\n    });\n  }\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n  componentDidMount() {\n    // load only if the owner object is given\n    if (this.props.location.owner) {\n      this.getTransactions();\n    }\n  }\n\n  /** Render a single row in the transaction table */\n  renderTransactionRow(transaction, balance) {\n    // For accessibility, the first column is set to be a <th> element, with a scope of 'row'. \n    // This enables screen readers to identify a cell's value by it's row and column name.\n\n    let currencyFormatter = BankAPI.getAPI().getCurrencyFormatter();\n\n    return (\n      <TableRow key={transaction.getID()}>\n        <TableCell align='center' component='th' scope='row'>\n          {transaction.getID()}\n        </TableCell>\n        <TableCell align='center'>{transaction.getSourceAccount()}</TableCell>\n        <TableCell align='center'>{transaction.getTargetAccount()}</TableCell>\n\n        {\n          (transaction.getType() === TransactionBO.TYPE_CREDIT) ?\n            <React.Fragment>\n              <TableCell align='right'>{currencyFormatter.format(transaction.getAmount())}</TableCell>\n              <TableCell align='right'>{}</TableCell>\n            </React.Fragment>\n            :\n            <React.Fragment>\n              <TableCell align='left'>{}</TableCell>\n              <TableCell align='left'>{currencyFormatter.format(transaction.getAmount())}</TableCell>\n            </React.Fragment>\n        }\n        <TableCell align='center'>{currencyFormatter.format(balance)}</TableCell>\n      </TableRow>\n    );\n  }\n\n  /** Render the body of the table with all transactions */\n  renderTransactions() {\n    let balance = 0;\n\n    return this.state.transactions.map(transaction => {\n      if (transaction.getType() === TransactionBO.TYPE_CREDIT) {\n        balance += transaction.getAmount();\n      } else {\n        balance -= transaction.getAmount();\n      }\n      return this.renderTransactionRow(transaction, balance);\n    });\n  }\n\n  /** Render the transaction table  */\n  renderTransactionTable() {\n    const { transactionsLoadingInProgress, creditsLoadingError, debitsLoadingError } = this.state;\n\n    if (!transactionsLoadingInProgress && !creditsLoadingError && !debitsLoadingError) {\n      return (\n        <TableContainer component={Paper}>\n          <Typography className={this.props.classes.tableHeader}>\n            List of transactions:\n          </Typography>\n          <Table aria-label='Debit/credit transactions table'>\n            <TableHead>\n              <TableRow>\n                <TableCell align='center'>ID</TableCell>\n                <TableCell align='center'>Source account</TableCell>\n                <TableCell align='center'>Target account</TableCell>\n                <TableCell align='right'>Credit</TableCell>\n                <TableCell align='left'>Debit</TableCell>\n                <TableCell align='center'>Balance</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {this.renderTransactions()}\n            </TableBody>\n          </Table>\n        </TableContainer>);\n    }\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes } = this.props;\n    let owner = null;\n    if (this.props.location.owner) {\n      // owner object exists\n      owner = this.props.location.owner\n    } else {\n      // owner object does not exist, we are called directly by route URL \n      // or the page has been refreshed -> put the user back to start page\n      return (<Redirect to='/' />);\n    }\n\n    const { customer, account } = owner;\n    const { transactionsLoadingInProgress, creditsLoadingError, debitsLoadingError } = this.state;\n\n    return (\n      <div>\n        <Typography component='div' className={classes.subNav}>\n          <Link component={RouterLink} to={{\n            pathname: '/customers',\n            expandCustomer: customer\n          }}>\n            <Grid container spacing={1} justify='flex-start' alignItems='stretch'>\n              <Grid item>\n                <ArrowBackIcon />\n              </Grid>\n              <Grid item>\n                Back to customer list\n              </Grid>\n            </Grid>\n          </Link>\n        </Typography>\n\n        <Paper className={classes.root}>\n          <Typography variant='h6'>\n            Account\n          </Typography>\n          <Typography className={classes.accountEntry}>\n            ID: {account.getID()}\n          </Typography>\n          <Typography>\n            Customer: {customer.getLastName()}, {customer.getFirstName()}\n          </Typography>\n        </Paper>\n\n        {this.renderTransactionTable()}\n\n        <LoadingProgress show={transactionsLoadingInProgress} />\n        <ContextErrorMessage error={creditsLoadingError} contextErrorMsg={`The credits of account ${this.accountID} could not be loaded.`} onReload={this.getTransactions} />\n        <ContextErrorMessage error={debitsLoadingError} contextErrorMsg={`The debits of account ${this.accountID} could not be loaded.`} onReload={this.getTransactions} />\n      </div>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    padding: theme.spacing(1),\n  },\n  subNav: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n  tableHeader: {\n    marginLeft: theme.spacing(1),\n    marginTop: theme.spacing(2),\n  }\n});\n\n/** PropTypes */\nTransactionList.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** @ignore */\n  match: PropTypes.object.isRequired,\n}\n\nexport default withRouter(withStyles(styles)(TransactionList));","import React from 'react'\nimport { makeStyles, Paper, Typography, Link } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n    padding: theme.spacing(1)\n  },\n  content: {\n    margin: theme.spacing(1),\n  }\n}));\n\n/**\n * Shows the about page with the impressum\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nfunction About() {\n\n  const classes = useStyles();\n\n  return (\n    <Paper elevation={0} className={classes.root}>\n      <div className={classes.content}>\n        <Typography variant='h6'>\n          Python Bank Administration Example Project\n        </Typography>\n        <br />\n        <Typography>\n          React Frontend written by <Link href='https://github.com/christophkunz'>Christoph Kunz</Link>\n        </Typography>\n        <Typography>\n          Python Backend written by <Link href='https://github.com/PeterThies'>Peter Thies</Link>\n        </Typography>\n        <br />\n        <Typography variant='body2'>\n          © Hochschule der Medien 2020, all rights reserved.\n        </Typography>\n      </div>\n    </Paper>\n  )\n}\n\nexport default About;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Typography, Paper } from '@material-ui/core';\nimport { BankAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\n\n/**\n * Renders a AccountBO object within a ListEntry and provides a delete button to delete it.\n * \n * @see See Material-UIs [Lists](https://material-ui.com/components/lists/)\n * @see See Material-UIs [ListItem](https://material-ui.com/api/list-item/)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass AccountDetail extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Init state\n    this.state = {\n      customer: null,\n      loadingInProgress: false,\n      loadingError: null,\n    };\n  }\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n  componentDidMount() {\n    this.getCustomer();\n  }\n\n  /** gets the balance for this account */\n  getCustomer = () => {\n    BankAPI.getAPI().getCustomer(this.props.customerID).then(customer =>\n      this.setState({\n        customer: customer,\n        loadingInProgress: false,\n        loadingError: null\n      })).catch(e =>\n        this.setState({ // Reset state with error from catch \n          customer: null,\n          loadingInProgress: false,\n          loadingError: e\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes, customerID, accountID } = this.props;\n    const { customer, loadingInProgress, loadingError } = this.state;\n\n    return (\n      <Paper variant='outlined' className={classes.root}>\n\n        <Typography variant='h6'>\n          Account\n        </Typography>\n        <Typography className={classes.accountEntry}>\n          ID: {accountID}\n        </Typography>\n        {\n          customer ?\n            <Typography>\n              Customer: {customer.getLastName()}, {customer.getFirstName()}\n            </Typography>\n            : null\n        }\n        <LoadingProgress show={loadingInProgress} />\n        <ContextErrorMessage error={loadingError} contextErrorMsg={`The data of customer id ${customerID} could not be loaded.`} onReload={this.getCustomer} />\n      </Paper>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    padding: theme.spacing(1),\n    marginTop: theme.spacing(1)\n  },\n  accountEntry: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0,\n  }\n});\n\n/** PropTypes */\nAccountDetail.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The customerID to be rendered */\n  customerID: PropTypes.string.isRequired,\n  /** The accountID to be rendered */\n  accountID: PropTypes.string.isRequired,\n}\n\nexport default withStyles(styles)(AccountDetail);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core';\nimport { BankAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport AccountDetail from './AccountDetail';\n\n/**\n * Shows all accounts of the bank.\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass AllAccountList extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Init an empty state\n    this.state = {\n      accounts: [],\n      loadingInProgress: false,\n      loadingError: null,\n    };\n  }\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n  componentDidMount() {\n    this.loadAccounts();\n  }\n\n  /** gets the account list for this account */\n  loadAccounts = () => {\n    BankAPI.getAPI().getAllAccounts().then(accounts =>\n      this.setState({\n        accounts: accounts,\n        loadingInProgress: false, // loading indicator \n        loadingError: null\n      })).catch(e =>\n        this.setState({ // Reset state with error from catch \n          loadingInProgress: false,\n          loadingError: e\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes } = this.props;\n    const { accounts, loadingInProgress, loadingError } = this.state;\n\n    return (\n      <div className={classes.root}>\n          {\n            accounts.map(account => <AccountDetail key={account.getID()} \n            customerID={account.getOwner().toString()} accountID={account.getID().toString()} />)\n          }\n          <LoadingProgress show={loadingInProgress} />\n          <ContextErrorMessage error={loadingError} contextErrorMsg={`The list of all accounts of the bank could not be loaded.`} onReload={this.loadAccounts} />\n      </div>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  }\n});\n\n/** PropTypes */\nAllAccountList.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(AllAccountList);\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport { colors } from '@material-ui/core';\n\nconst white = '#FFFFFF';\nconst black = '#000000';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    black,\n    white,\n    primary: {\n      contrastText: white,\n      dark: colors.indigo[900],\n      main: colors.indigo[500],\n      light: colors.indigo[100]\n    },\n    secondary: {\n      contrastText: white,\n      dark: colors.blue[900],\n      main: colors.blue['A400'],\n      light: colors.blue['A400']\n    },\n    success: {\n      contrastText: white,\n      dark: colors.green[900],\n      main: colors.green[600],\n      light: colors.green[400]\n    },\n    info: {\n      contrastText: white,\n      dark: colors.blue[900],\n      main: colors.blue[600],\n      light: colors.blue[400]\n    },\n    warning: {\n      contrastText: white,\n      dark: colors.orange[900],\n      main: colors.orange[600],\n      light: colors.orange[400]\n    },\n    error: {\n      contrastText: white,\n      dark: colors.red[900],\n      main: colors.red[600],\n      light: colors.red[400]\n    },\n    text: {\n      primary: colors.blueGrey[800],\n      secondary: colors.blueGrey[600],\n      link: colors.blue[600]\n    },\n    background: {\n      default: '#F4F6F8',\n      paper: white\n    },\n    icon: colors.blueGrey[600],\n    divider: colors.grey[200]\n  }, \n});\n\n\n// A custom theme for this app\n// const theme = createMuiTheme({\n//   palette: {\n//     primary: {\n//       main: '#556cd6',\n//     },\n//     secondary: {\n//       main: '#19857b',\n//     },\n//     error: {\n//       main: red.A400,\n//     },\n//     background: {\n//       default: '#fff',\n//     },\n//   },\n// });\n\n\nexport default theme;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Grid, Typography, withStyles } from '@material-ui/core';\n\n/** \n * Renders a landing page for users who are not signed in. Provides a sign in button \n * for using an existing google account to sign in. The component uses firebase to \n * do redirect based signin process.\n * \n * @see See Googles [firebase authentication](https://firebase.google.com/docs/web/setup)\n * @see See Googles [firebase API reference](https://firebase.google.com/docs/reference/js)\n * \n */\nclass SignIn extends Component {\n\n\n\t/** \n\t * Handles the click event of the sign in button an calls the prop onSignIn handler\n\t */\n\thandleSignInButtonClicked = () => {\n\t\tthis.props.onSignIn();\n\t}\n\n\t/** Renders the sign in page, if user objext is null */\n\trender() {\n\t\tconst { classes } = this.props;\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Typography className={classes.root} align='center' variant='h6'>Welcome to the HdM React/Python Project Showcase</Typography>\n\t\t\t\t<Typography className={classes.root} align='center'>It appears, that you are not signed in.</Typography>\n\t\t\t\t<Typography className={classes.root} align='center'>To use the services of the HdM Bank please</Typography>\n\t\t\t\t<Grid container justify='center'>\n\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t<Button variant='contained' color='primary' onClick={this.handleSignInButtonClicked}>\n\t\t\t\t\t\t\tSign in with Google\n      \t\t\t</Button>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n\troot: {\n\t\tmargin: theme.spacing(2)\n\t}\n});\n\n/** PropTypes */\nSignIn.propTypes = {\n\t/** @ignore */\n\tclasses: PropTypes.object.isRequired,\n\t/** \n\t * Handler function, which is called if the user wants to sign in.\n\t */\n\tonSignIn: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(SignIn)","import React from 'react';\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\nimport { Container, ThemeProvider, CssBaseline } from '@material-ui/core';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport * as firebaseui from 'firebaseui';\nimport Header from './components/layout/Header';\nimport CustomerList from './components/CustomerList';\nimport TransactionList from './components/TransactionList';\nimport About from './components/pages/About';\nimport AllAccountList from './components/AllAccountList';\nimport Theme from './Theme';\nimport SignIn from './components/pages/SignIn';\nimport LoadingProgress from './components/dialogs/LoadingProgress';\nimport ContextErrorMessage from './components/dialogs/ContextErrorMessage';\n\nclass App extends React.Component {\n\n\t/** The firebase config structure for the Python Bank Project as provided by the firebase admin website */\n\t#firebaseConfig = {\n\t\tapiKey: 'AIzaSyDP7u7KNLeF7-UoXa3OxQv00l1oWKziETA',\n\t\tauthDomain: 'python-bankprojekt-thies.firebaseapp.com',\n\t\tdatabaseURL: 'https://python-bankprojekt-thies.firebaseio.com',\n\t\tprojectId: 'python-bankprojekt-thies',\n\t\tstorageBucket: 'python-bankprojekt-thies.appspot.com',\n\t\tmessagingSenderId: '152608653446',\n\t\tappId: '1:152608653446:web:5c61ccd44caf691cde9107'\n\t};\n\n\t/** Constructor of the app, which initializes firebase  */\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\t// Init an empty state\n\t\tthis.state = {\n\t\t\tcurrentUser: null,\n\t\t\tappError: null,\n\t\t\tauthError: null,\n\t\t\tauthLoading: false\n\t\t};\n\t}\n\n\t/** \n\t * Create an error boundary for this app and recieve all errors from below the component tree.\n\t * \n\t * @See See Reacts [Error Boundaries](https://reactjs.org/docs/error-boundaries.html)\n \t */\n\tstatic getDerivedStateFromError(error) {\n\t\t// Update state so the next render will show the fallback UI.\n\t\treturn { appError: error };\n\t}\n\n\t/** Handles firebase usres logged in state changes  */\n\thandleAuthStateChange = user => {\n\t\tif (user) {\n\t\t\tthis.setState({\n\t\t\t\tauthLoading: true\n\t\t\t});\n\t\t\t// The user is signed in\n\t\t\tuser.getIdToken().then(token => {\n\t\t\t\t// Add the token to the browser's cookies. The server will then be\n\t\t\t\t// able to verify the token against the API.\n\t\t\t\t// SECURITY NOTE: As cookies can easily be modified, only put the\n\t\t\t\t// token (which is verified server-side) in a cookie; do not add other\n\t\t\t\t// user information.\n\t\t\t\tdocument.cookie = `token=${token};path=/`;\n\n\t\t\t\t// Set the user not before the token arrived \n\t\t\t\tthis.setState({\n\t\t\t\t\tcurrentUser: user,\n\t\t\t\t\tauthError: null,\n\t\t\t\t\tauthLoading: false\n\t\t\t\t});\n\t\t\t}).catch(e => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tauthError: e,\n\t\t\t\t\tauthLoading: false\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\t// User has logged out, so clear the id token\n\t\t\tdocument.cookie = 'token=;path=/';\n\n\t\t\t// Set the logged out user to null\n\t\t\tthis.setState({\n\t\t\t\tcurrentUser: null,\n\t\t\t\tauthLoading: false\n\t\t\t});\n\t\t}\n\t}\n\n  /** \n   * Handles the sign in request of the SignIn component uses the firebase.auth() component to sign in.\n\t * @see See Google [firebase.auth()](https://firebase.google.com/docs/reference/js/firebase.auth.Auth)\n\t * @see See Google [firebase.auth().signInWithRedirect](https://firebase.google.com/docs/reference/js/firebase.auth.Auth#signinwithredirect)\n\t */\n\thandleSignIn = () => {\n\t\tthis.setState({\n\t\t\tauthLoading: true\n\t\t});\n\t\tconst provider = new firebase.auth.GoogleAuthProvider();\n\t\tfirebase.auth().signInWithRedirect(provider);\n\n\t\t// const uiConfig = {\n\t\t// \tsignInSuccessUrl: '/static/reactfrontend/index.html',\n\t\t// \tsignInOptions: [\n\t\t// \t\t// Comment out any lines corresponding to providers you did not check in\n\t\t// \t\t// the Firebase console.\n\t\t// \t\tfirebase.auth.GoogleAuthProvider.PROVIDER_ID,\n\t\t// \t\tfirebase.auth.EmailAuthProvider.PROVIDER_ID,\n\t\t// \t\t//firebase.auth.FacebookAuthProvider.PROVIDER_ID,\n\t\t// \t\t//firebase.auth.TwitterAuthProvider.PROVIDER_ID,\n\t\t// \t\t//firebase.auth.GithubAuthProvider.PROVIDER_ID,\n\t\t// \t\t//firebase.auth.PhoneAuthProvider.PROVIDER_ID\n\n\t\t// \t],\n\t\t// \t// Terms of service url.\n\t\t// \ttosUrl: '<url>'\n\t\t// };\n\n\t\t// const ui = new firebaseui.auth.AuthUI(firebase.auth())\n\n\t\t// // This adds firebaseui to the page\n\t\t// // It does everything else on its own\n\t\t// \tui.start('#firebaseui', uiConfig)\n\t}\n\n\t\t/**\n\t\t * Lifecycle method, which is called when the component gets inserted into the browsers DOM.\n\t\t * Initializes the firebase SDK.\n\t\t * \n\t\t * @see See Googles [firebase init process](https://firebase.google.com/docs/web/setup)\n\t\t */\n\t\tcomponentDidMount() {\n\t\t\tfirebase.initializeApp(this.#firebaseConfig);\n\t\t\tfirebase.auth().languageCode = 'en';\n\t\t\tfirebase.auth().onAuthStateChanged(this.handleAuthStateChange);\n\t\t}\n\n\t\t/** Renders the whole app */\n\t\trender() {\n\t\t\tconst { currentUser, appError, authError, authLoading } = this.state;\n\n\t\t\treturn (\n\t\t\t\t<ThemeProvider theme={Theme}>\n\t\t\t\t\t{/* Global CSS reset and browser normalization. CssBaseline kickstarts an elegant, consistent, and simple baseline to build upon. */}\n\t\t\t\t\t<CssBaseline />\n\t\t\t\t\t<Router basename={process.env.PUBLIC_URL}>\n\t\t\t\t\t\t<Container maxWidth='md'>\n\t\t\t\t\t\t\t<Header user={currentUser} />\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Is a user signed in?\n\t\t\t\t\t\t\t\tcurrentUser ?\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t<Redirect from='/' to='customers' />\n\t\t\t\t\t\t\t\t\t\t<Route exact path='/customers'>\n\t\t\t\t\t\t\t\t\t\t\t<CustomerList />\n\t\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t\t<Route path='/transactions'>\n\t\t\t\t\t\t\t\t\t\t\t<TransactionList />\n\t\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t\t<Route path='/accounts'>\n\t\t\t\t\t\t\t\t\t\t\t<AllAccountList />\n\t\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t\t\t<Route path='/about' component={About} />\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t// else show the sign in page\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t<Redirect to='/index.html' />\n\t\t\t\t\t\t\t\t\t\t<SignIn onSignIn={this.handleSignIn} />\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t<LoadingProgress show={authLoading} />\n\t\t\t\t\t\t\t<ContextErrorMessage error={authError} contextErrorMsg={`Something went wrong during sighn in process.`} onReload={this.handleSignIn} />\n\t\t\t\t\t\t\t<ContextErrorMessage error={appError} contextErrorMsg={`Something went wrong inside the app. Please reload the page.`} />\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t</Router>\n\t\t\t\t</ThemeProvider>\n\t\t\t);\n\t\t}\n\t}\n\n\texport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}